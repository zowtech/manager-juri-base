import { Pool } from 'pg';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env' });

const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL n√£o encontrada');
  process.exit(1);
}

const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function checkData() {
  try {
    console.log('üîç Verificando dados no banco...');
    
    // Verificar usu√°rios
    const users = await pool.query('SELECT username, email, role FROM users ORDER BY username');
    console.log('\nüë• USU√ÅRIOS:');
    users.rows.forEach(user => {
      console.log(`   ${user.username} (${user.email}) - ${user.role}`);
    });
    
    // Verificar funcion√°rios
    const employees = await pool.query('SELECT nome, matricula, empresa FROM employees ORDER BY nome');
    console.log('\nüë∑ FUNCION√ÅRIOS:');
    employees.rows.forEach(emp => {
      console.log(`   ${emp.nome} (${emp.matricula}) - ${emp.empresa}`);
    });
    
    // Verificar casos
    const cases = await pool.query('SELECT "clientName", "processNumber", status FROM cases ORDER BY "clientName"');
    console.log('\n‚öñÔ∏è CASOS:');
    cases.rows.forEach(case_ => {
      console.log(`   ${case_.clientName} - ${case_.processNumber} (${case_.status})`);
    });
    
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
    console.log(`üìä Total: ${users.rows.length} usu√°rios, ${employees.rows.length} funcion√°rios, ${cases.rows.length} casos`);
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await pool.end();
  }
}

checkData();