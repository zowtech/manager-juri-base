#!/usr/bin/env node

// Script para testar e corrigir conex√£o Render -> Supabase
const { Pool } = require('pg');

async function testConnection() {
  console.log('üîß Testando conex√£o Render -> Supabase...');
  
  const connectionString = process.env.DATABASE_URL;
  if (!connectionString) {
    console.error('‚ùå DATABASE_URL n√£o encontrada');
    process.exit(1);
  }

  console.log('üîó URL:', connectionString.replace(/:[^:@]*@/, ':****@'));

  // Tentar diferentes configura√ß√µes
  const configs = [
    {
      name: 'Configura√ß√£o padr√£o',
      config: { 
        connectionString,
        ssl: { rejectUnauthorized: false }
      }
    },
    {
      name: 'Com timeout menor',
      config: { 
        connectionString,
        ssl: { rejectUnauthorized: false },
        connectionTimeoutMillis: 5000,
        query_timeout: 10000
      }
    },
    {
      name: 'For√ßando IPv4',
      config: { 
        connectionString,
        ssl: { rejectUnauthorized: false },
        options: '-c default_transaction_isolation=read committed'
      }
    }
  ];

  for (const test of configs) {
    console.log(`\nüß™ Testando: ${test.name}`);
    const pool = new Pool(test.config);
    
    try {
      const start = Date.now();
      const result = await pool.query('SELECT NOW() as current_time, version()');
      const duration = Date.now() - start;
      
      console.log(`‚úÖ SUCESSO em ${duration}ms`);
      console.log(`‚è∞ Hora servidor: ${result.rows[0].current_time}`);
      console.log(`üìä PostgreSQL: ${result.rows[0].version.split(' ')[1]}`);
      
      // Testar consulta nas tabelas
      try {
        const users = await pool.query('SELECT count(*) as total FROM users');
        const cases = await pool.query('SELECT count(*) as total FROM cases'); 
        const employees = await pool.query('SELECT count(*) as total FROM employees');
        
        console.log(`üë• Usu√°rios: ${users.rows[0].total}`);
        console.log(`‚öñÔ∏è Casos: ${cases.rows[0].total}`);
        console.log(`üëî Funcion√°rios: ${employees.rows[0].total}`);
        
        pool.end();
        console.log('\nüéâ Conex√£o perfeita! Use esta configura√ß√£o.');
        break;
        
      } catch (tableErr) {
        console.log('‚ö†Ô∏è Conex√£o OK, mas erro nas tabelas:', tableErr.message);
      }
      
      pool.end();
      
    } catch (err) {
      console.log(`‚ùå FALHA: ${err.message}`);
      pool.end();
    }
  }
}

if (require.main === module) {
  testConnection().catch(console.error);
}