Quero que você revise e altere meu repositório manager-juri-base para ficar 100% compatível com o Render. Faça exatamente o que segue:

OBJETIVO

Remover qualquer duplicidade de listen (EADDRINUSE) e deixar apenas um ponto escutando a porta do Render.

Garantir que o start de produção use process.env.PORT.

Remover secrets hardcoded (URL do banco) e usar variáveis de ambiente.

Manter build com Vite para o front e Node (ESM) para o server.

Adicionar /health e desligamento gracioso.

Preparar package.json e render.yaml para deploy.

PASSO 1 — Remover duplicidade de servidor
1.1 start-production.js

Este arquivo não pode criar servidor nem fazer listen.

Transforme-o em loader que apenas importa o dist/index.js.

Substitua TODO o conteúdo por:

#!/usr/bin/env node
process.env.NODE_ENV = process.env.NODE_ENV || 'production';

import('./dist/index.js').catch((err) => {
  console.error('Falha ao iniciar a app:', err);
  process.exit(1);
});


Verifique se não existe nenhuma chamada a app.listen ou server.listen aqui.

1.2 server/index.ts (ou o arquivo que cria o servidor em produção)

Este deve ser o único lugar que chama listen.

Assegure que usa a porta do Render:

const PORT = Number(process.env.PORT) || 10000;
// se usa http.createServer(app), mantenha um único server.listen:
server.listen(PORT, '0.0.0.0', () => {
  console.log(`✅ Server listening on port ${PORT}`);
});


Garanta que não há outro app.listen/server.listen em render-start.js, start-render.js, render-simple-start.js, etc. Se houver, remova.

PASSO 2 — Variáveis de ambiente e Supabase
2.1 server/db.ts (ou onde a conexão é criada)

Não use nenhum fallback hardcoded para DATABASE_URL.

Leia apenas de process.env.DATABASE_URL.

Se usar pg/Drizzle, garanta SSL compatível com Supabase (pooler):

const dbUrl = process.env.DATABASE_URL;
if (!dbUrl) {
  throw new Error('DATABASE_URL is not set');
}

// Exemplo com pg Pool:
import { Pool } from 'pg';
const pool = new Pool({
  connectionString: dbUrl,
  ssl: { rejectUnauthorized: false }, // Supabase/Render
  // Opcional: max: 1 se usar pgbouncer com connection_limit=1
});
export default pool;


Não deixe nenhum DATABASE_URL = 'postgresql://...' no código.

2.2 Documente para o Render (em README-RENDER.md)

DATABASE_URL deve ser a connection string do Transaction Pooler do Supabase (porta 6543) com ?pgbouncer=true&connection_limit=1.

PASSO 3 — Scripts e build
3.1 package.json

Ajuste os scripts para produção no Render:

{
  "scripts": {
    "build": "npx vite build && npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "render-build": "npm install --include=dev && npm run build"
  },
  "type": "module"
}


Não use nodemon/pm2 em produção no Render.

Se houver render-start.cjs/start-render.cjs/render-start.js: remova ou não chame listen neles.

3.2 render.yaml (se existente)

Ajuste para:

services:
  - type: web
    name: manager-juri-base
    env: node
    plan: free
    buildCommand: npm run render-build
    startCommand: npm start
    autoDeploy: true
    healthCheckPath: /health
    envVars:
      - key: NODE_ENV
        value: production
      # defina DATABASE_URL pelo dashboard do Render (não versionar o valor)


Se já existir render.yaml, atualize os campos acima.

PASSO 4 — Servir estáticos e Vite

Confirme que o backend serve os estáticos do Vite de dist/public:

import path from 'path';
import express from 'express';
const app = express();

const publicDir = path.resolve(process.cwd(), 'dist', 'public');
app.use(express.static(publicDir));


Não recompile no start; compile só no build.

PASSO 5 — Healthcheck e shutdown gracioso

No server/index.ts, adicione:

app.get('/health', (_, res) => res.status(200).send('ok'));

process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('HTTP server closed');
    process.exit(0);
  });
});

PASSO 6 — Limpezas e avisos

Remover qualquer console.log que mostre trechos do DATABASE_URL.

Remover arquivos redundantes que iniciem servidor:

render-simple-start.js, render-start.js, start-render.js, etc.

se precisar manter por documentação, garanta que não chamam listen.

Manter .replit apenas para ambiente local do Replit, sem afetar produção.

PASSO 7 — Testes locais

Rodar local:
npm run build
PORT=3000 npm start

Acessar http://localhost:3000/health → deve responder ok.

Verificar se apenas um “Server listening” aparece no console.

PASSO 8 — Instruções para o Render (coloque no README)

Build Command: npm run render-build

Start Command: npm start

Env Vars: setar DATABASE_URL (Supabase pooler) e NODE_ENV=production

URL pública: usar process.env.PORT (já configurado no passo 1.2)

Aceite do PR

Entregue um PR com:

start-production.js convertido para loader (sem listen);

garantia de um único listen em server/index.ts;

package.json scripts conforme acima;

render.yaml atualizado (se usado);

db.ts sem secrets hardcoded, lendo apenas process.env.DATABASE_URL;

rota /health e shutdown gracioso;

README com instruções de deploy no Render.